 Recap
 Syntax:-
 ---------
 for variable in item1 item2 item3
 do


 done

 var="1 2 3 4 5 abc 1.345 10.20.30.40" 

 for v in $var <==
 
 for v in 1 2 3 4 5 abc 1.345 10.20.30.40
 do
	echo $v # run 8times
 done

 
 for v in "$var" <==
 do
	echo $v # run 1time
 done

 root@krosum:~/SH# cat -n p1 
     1	var="10 3.45 data 10.20.30.40 /etc/passwd"
     2	
     3	for v in $var
     4	do
     5		echo "$v"
     6	done
     7	echo
     8	echo
     9	for v in "$var"
    10	do
    11		echo "$v"
    12	done
root@krosum:~/SH# 


 
root@krosum:~/SH# ./p1 
10
3.45
data
10.20.30.40
/etc/passwd


10 3.45 data 10.20.30.40 /etc/passwd
root@krosum:~/SH# 
root@krosum:~/SH# var="10 20 30 40"
root@krosum:~/SH# echo $var
10 20 30 40
root@krosum:~/SH# for v in "10 20 30 40"
> do
> echo "Hello"
> done
Hello
root@krosum:~/SH# 


########################################################################################################
 
 Array
 Function
 Filters + Regx 

======================================================================================

 Array 
 ------
	->variable - holding more than one value
			     --------------------
				each value is located in different address
	 

 Syntax:-
 ---------
 arrayname=(list of items)
 |       -----
 |          |___there is no space in = LHS,RHS
 |__A-Za-z_

 

  v=`command`		vs	A=(`command`)
  

 declare -a arrayname=( )
 ----------
  |
 keyword(optional)
 
 
  a=(10 1.345  data  10.20.30.40  /etc/passwd)
     -- -----  ----   ----------- ----------
    0x21 0x44   0x25    0x988       0x348
     0    1	2	3	     4 <=== index (from LHS ->RHS) 
    -5	 -4	-3	-2	    -1 <=== index (from RHS ->LHS)


  b="10 1.345 data 10.20.30.40  /etc/passwd" | 10 1.345 data 10.20.30.40 /etc/passwd |0x1234
  |
  |__UDV - this is not an array variable
  
  
  How to fetch/read single data from an array?
  ----------------------------------------------
    ${arrayname[index]} 
 
  echo ${a[1]} ---> 1.345 

  echo ${a[-1]} ----->/etc/passwd 

  echo ${a[8]} ---->Empty line 

  echo ${a[-2]} --->10.20.30.40


  if [  ${a[0]} -eq ${a[-5]} ]
  then
	....
  else
	....
  fi
  
   To get list of all the array elements
   ---------------------------------------
      ${Arrayname[@]} (or) ${Arrayname[*]}  # recap cmdline args ->$@ / $*

     echo ${a[@]}  10 1.345  data  10.20.30.40  /etc/passwd
  

    for v in ${a[@]}
    do
	 ...
    done

   Size of an array (or) total no.of elements 
   ---------------------------------------------

        ${#Arrayname[@]}  --> $# in cmdline args 
	-----------------
	  |__int

   echo ${#a[@]} ->5

  
  ${Arrayname[@]:OFFSET:LENGTH}
		 ------ ======
		 index   count
		  |	  |___based on the index - count will start from 1 2 3 4...
		0 1 2 .. 


		  *   *   *   *
   PIDS=(101 102 103 104 105 106 107 108)
	 |    |   |   |   |   |   |   |
         0    1   2   3   4   5   6   7 <== index


	echo ${PIDS[@]:2:4} --> 103 104 105 106
	
	echo ${PIDS[@]:2:} --> 103 104 105 106 107 108 # from 2nd index to list of all

	echo ${PIDS[@]:0:2}  --> 101 102



    for v in 10 20 30 <== unnamed collection
    do
	...
    done

    A=(10 20 30)
    for v  in ${A[@]} <== named collection - is called Array
    do
		..
    done


 ##################################################################################################

 Function
 ---------
	-> Code block -> subscript (or) collection of cmds 

	-> function definition  - operation
	-> function call - invoke a definition - call a definition

	-> code reusability 


function definitionSyntax:-
---------------------------
	function functionname( )
	{
		Codeblock

	}
 
 How to call definition ?

  functionname 

 function display(){
	echo "System details"
	uname -rs
	echo $SHELL
	echo $BASH_VERSION
	hostname
	uptime
	echo "Today:`date +%D`"
 }
 display # simple function call

  File:p1.sh
 +---------------------------------------------+
 | echo $1 $2 ${5}	-> host01 host02 host05		      
 | echo $@    ------------> host01 host02 host03 host04 host05
 | echo $# -------------> 5                                   
 |
 | f1(){
 |	echo "this is $FUNCNAME block"         
 |      echo $1 $2 ${5}	-> 10 1.34 A	             
 |	echo $@	 --> 10 1.34 data /etc/passwd A B C D
 |      echo $#	-->8			       |
 | }	
 |
 |f2(){
 |     echo $1 $2 $5 ---> empty
 | }				      
 |					       |
 | f1 10 1.34 data /etc/passwd A B C D         |
 | f2 					       |
 +---------------------------------------------+
  
 root@host~]# ./p1.sh host01 host02 host03 host04 host05


##################################################################################################

   && ||

 command1 && command2 
 --------    --------
 True1		True2   -->True1 True2

 command1 && command2   ---> command1 only (True1) 
 -------     =========
 True1	       False1 

 command1  && command2 
 --------  ============
 False1      True/False
 -------
  |
  |
 exit - it won't test command2


 command1 || Command2
 --------    --------
 True1	      True2
  |		|
  |-------------|
  |
  |_____________________True1 only will print
 
  command1 || command2
  --------    ---------
  Failed 	True  ------>print command2(True )


 
 if [  ];then
	....
 else
	....
 fi
 

 ###################################################################################################
 
 grep
 find
 sort
 cut
 paste
 comm
 tr
 tee
 head tail more  less
 
 read - read data from <FILE> or PIPE
 ----
 stores - stores to buffer 
 ------
 execute - filter command action  (execute on the buffer) 
 --------
 display  -- STDOUT (monitor)
 ------- 
 
 filter -option <input-file>

 command|filter -option 

	
  grep -option pattern input 
  ----
   |__ search the pattern from input file
		  -------
		   |__text (or) string

   |___ operation -> display /print 

	
  -option
  ---------
	-n  ->display matched pattern linenumber
	
	-i  ->ignore case

	-c  -> count the matched pattern 

	-v  -> inverse (not matching)

	-e  -> extended pattern(multiple pattern)
	
	-l  -> list the matched pattern filename

	-w  -> word 
	
	-o  -> output
  	
	-q  -> quit 
	
	-E -->extended pattern (Regx ->ERE)

	-f ==> file (pattern)
 

  ##############################################################################################

   find - search a file /directory
   -----
   
   find <search-path> -name <input-file>
   ----  ------------
	  |
	  |__recursive

   
	    <search-path>
		|
		|
           --------------
	   |	|   ..   |
	  L1    L2   ..  Ln
		 |	 |
		 |__
		
     -maxdepth 
     
     -mindepth 
  

     -size

 find <Path> -name inputfile
	|
	|_recursively 
	 ......
	......
 find |xargs  filemanipulation command
	      -------------------------


    P1 - 0x13444 - COW - execute P2 process on Parent Address
    |
    P2 -

  find .... -exec command {} \;

   {.....\
    .....\
    .....\
   } 
 

 #################################################################################################


  06/24/2020/
  ----------
	  |__ 01/f1.jpg f2.jpg ... fn.jpg
	  |__ 02/fx.jpg .........
	  |__ ..

	  |__ 23/f1.jpg
	
 07/24/2020
 ------------
 
 less - Home End PageUp PageDown

 more - space.,Enter 
 q - quit 

###################################################################################################